using ESPlus.Interfaces;
using Xunit;

namespace ESPlus.Tests
{
    public class StringPairTests
    {
        [Theory]
        [InlineData("tenant1", "path1", "tenant1", "path1", true)]
        [InlineData("tenant1", "path1", "tenant1", "path2", false)]
        [InlineData("tenant1", "path1", "tenant1", null, false)]
        [InlineData("tenant1", "path1", "tenant2", "path1", false)]
        [InlineData("tenant1", "path1", "tenant2", "path2", false)]
        [InlineData("tenant1", "path1", "tenant2", null, false)]
        [InlineData("tenant1", "path1", null, "path1", false)]
        [InlineData("tenant1", "path1", null, "path2", false)]
        [InlineData("tenant1", "path1", null, null, false)]
        [InlineData("tenant1", "path2", "tenant1", "path1", false)]
        [InlineData("tenant1", "path2", "tenant1", "path2", true)]
        [InlineData("tenant1", "path2", "tenant1", null, false)]
        [InlineData("tenant1", "path2", "tenant2", "path1", false)]
        [InlineData("tenant1", "path2", "tenant2", "path2", false)]
        [InlineData("tenant1", "path2", "tenant2", null, false)]
        [InlineData("tenant1", "path2", null, "path1", false)]
        [InlineData("tenant1", "path2", null, "path2", false)]
        [InlineData("tenant1", "path2", null, null, false)]
        [InlineData("tenant1", null, "tenant1", "path1", false)]
        [InlineData("tenant1", null, "tenant1", "path2", false)]
        [InlineData("tenant1", null, "tenant1", null, true)]
        [InlineData("tenant1", null, "tenant2", "path1", false)]
        [InlineData("tenant1", null, "tenant2", "path2", false)]
        [InlineData("tenant1", null, "tenant2", null, false)]
        [InlineData("tenant1", null, null, "path1", false)]
        [InlineData("tenant1", null, null, "path2", false)]
        [InlineData("tenant1", null, null, null, false)]
        [InlineData("tenant2", "path1", "tenant1", "path1", false)]
        [InlineData("tenant2", "path1", "tenant1", "path2", false)]
        [InlineData("tenant2", "path1", "tenant1", null, false)]
        [InlineData("tenant2", "path1", "tenant2", "path1", true)]
        [InlineData("tenant2", "path1", "tenant2", "path2", false)]
        [InlineData("tenant2", "path1", "tenant2", null, false)]
        [InlineData("tenant2", "path1", null, "path1", false)]
        [InlineData("tenant2", "path1", null, "path2", false)]
        [InlineData("tenant2", "path1", null, null, false)]
        [InlineData("tenant2", "path2", "tenant1", "path1", false)]
        [InlineData("tenant2", "path2", "tenant1", "path2", false)]
        [InlineData("tenant2", "path2", "tenant1", null, false)]
        [InlineData("tenant2", "path2", "tenant2", "path1", false)]
        [InlineData("tenant2", "path2", "tenant2", "path2", true)]
        [InlineData("tenant2", "path2", "tenant2", null, false)]
        [InlineData("tenant2", "path2", null, "path1", false)]
        [InlineData("tenant2", "path2", null, "path2", false)]
        [InlineData("tenant2", "path2", null, null, false)]
        [InlineData("tenant2", null, "tenant1", "path1", false)]
        [InlineData("tenant2", null, "tenant1", "path2", false)]
        [InlineData("tenant2", null, "tenant1", null, false)]
        [InlineData("tenant2", null, "tenant2", "path1", false)]
        [InlineData("tenant2", null, "tenant2", "path2", false)]
        [InlineData("tenant2", null, "tenant2", null, true)]
        [InlineData("tenant2", null, null, "path1", false)]
        [InlineData("tenant2", null, null, "path2", false)]
        [InlineData("tenant2", null, null, null, false)]
        [InlineData(null, "path1", "tenant1", "path1", false)]
        [InlineData(null, "path1", "tenant1", "path2", false)]
        [InlineData(null, "path1", "tenant1", null, false)]
        [InlineData(null, "path1", "tenant2", "path1", false)]
        [InlineData(null, "path1", "tenant2", "path2", false)]
        [InlineData(null, "path1", "tenant2", null, false)]
        [InlineData(null, "path1", null, "path1", true)]
        [InlineData(null, "path1", null, "path2", false)]
        [InlineData(null, "path1", null, null, false)]
        [InlineData(null, "path2", "tenant1", "path1", false)]
        [InlineData(null, "path2", "tenant1", "path2", false)]
        [InlineData(null, "path2", "tenant1", null, false)]
        [InlineData(null, "path2", "tenant2", "path1", false)]
        [InlineData(null, "path2", "tenant2", "path2", false)]
        [InlineData(null, "path2", "tenant2", null, false)]
        [InlineData(null, "path2", null, "path1", false)]
        [InlineData(null, "path2", null, "path2", true)]
        [InlineData(null, "path2", null, null, false)]
        [InlineData(null, null, "tenant1", "path1", false)]
        [InlineData(null, null, "tenant1", "path2", false)]
        [InlineData(null, null, "tenant1", null, false)]
        [InlineData(null, null, "tenant2", "path1", false)]
        [InlineData(null, null, "tenant2", "path2", false)]
        [InlineData(null, null, "tenant2", null, false)]
        [InlineData(null, null, null, "path1", false)]
        [InlineData(null, null, null, "path2", false)]
        [InlineData(null, null, null, null, true)]
        public void Tests(string tenant1, string path1, string tenant2, string path2, bool expected)
        {
            var first = new StringPair(tenant1, path1);
            var second = new StringPair(tenant2, path2);

            Assert.Equal(expected, first.Equals(second));
        }
    }
}